@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/apps/{ApplicationID}/addtemplate"

<AuthorizeView Roles="Admin, Workflow admin">
    <Authorized>
        <h3>Add a new template</h3>

        <hr />

        <div>
            <label for="template-name">Template name:</label>
            <input name="template-name" @bind-value="template.Name" placeholder="Enter a template name..." id="template-name" type="text" class="form-control" />
        </div>

        <div class="row mt-3">
            <div class="col-md">
                <div class="card">
                    <div class="card-header">
                        <h4><span class="oi oi-image"></span> Template image</h4>
                    </div>

                    <div class="card-body">
                        <div id="template-canvas">
                            <img id="template-preview-image" draggable="false" src="@fileContent" />
                        </div>
                    </div>

                    <div class="card-footer">
                        <InputFile OnChange="FileSelected" />
                    </div>
                </div>
            </div>

            <div class="col-md">
                <div>
                    <div class="card">
                        <div class="card-header">
                            <div class="row">
                                <div class="col">
                                    <h4>Fields</h4>
                                </div>
                                <div class="col-1">
                                    <span class="oi oi-plus pointer mt-2" @onclick="AddNewField"></span>
                                </div>
                            </div>
                        </div>

                        <div class="card-body">
                            <div id="field-list">
                                @if (fields.Count > 0)
                                {
                                    @foreach (Field field in fields)
                                    {
                                        <div class="field-list-item mt-1 pr-3 pl-3 pt-2 pb-2">
                                            <div class="row">
                                                <div class="col">
                                                    <input class="field-input" @bind-value="field.Name" placeholder="Enter a field name..." />
                                                </div>

                                                <div class="col-1 pointer" @onclick="@(e => DrawField(field.ID))">
                                                    <span class="oi oi-pencil mt-2"></span>
                                                </div>

                                                <div class="col-1 pointer" @onclick="@(e => SetFieldToIdentifying(field))">
                                                    <span class="oi oi-star mt-2"></span>
                                                </div>

                                                <div class="col-1 pointer" @onclick="@(e => RemoveField(field))">
                                                    <span class="oi oi-trash mt-2"></span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="card-text">This template has no fields.</p>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h4><span class="oi oi-star"></span> Identifying field</h4>
                        </div>

                        <div class="card-body">
                            @if (identifyingField != null)
                            {
                                <div class="field-list-item">
                                    <p>@identifyingField.Name</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--mt-3 mb-3 bottom-row-->
        <div class="mt-2 mb-2">
            <button class="btn btn-success" disabled="@SubmitButtonDisabledAttribute" @onclick="Confirm">
                <span class="oi oi-check"></span> Submit
            </button>
        </div>

        @code
        {
            [Parameter]
            public string ApplicationID { get; set; }

            private Template template = new Template() { ID = Guid.NewGuid().ToString() };

            private string fileContent;

            private bool isSubmitButtonDisabled = false;

            private List<Field> fields = new List<Field>();

            private Field identifyingField;

            private string SubmitButtonDisabledAttribute => isSubmitButtonDisabled ? "disabled" : null;

            private async Task FileSelected(IFileListEntry[] files)
            {
                if (files.Count() > 1)
                {
                    return;
                }
                System.IO.MemoryStream stream;
                foreach (var file in files)
                {
                    if (file.Type.Equals("application/pdf"))
                    {
                        return;
                    }
                    fileContent = $"data:{file.Type};base64,";

                    using (stream = new System.IO.MemoryStream())
                    {
                        await file.Data.CopyToAsync(stream);
                        template.Image = stream.ToArray();
                        fileContent += Convert.ToBase64String(template.Image);
                    }
                }
            }

            private async Task Confirm()
            {
                if (fields.Count > 0 && !string.IsNullOrEmpty(template.Name) && template.Image != null)
                {
                    template.AppID = ApplicationID;
                    template.Added = DateTime.Now;
                    template.Updated = template.Updated;
                    var imageDimensions = await IJSRuntime.InvokeAsync<string>("getImageProperties", "template-preview-image");
                    var imageDimensionsSplit = imageDimensions.Split("|");
                    template.Xdimension = Convert.ToInt32(imageDimensionsSplit[0]);
                    template.Ydimension = Convert.ToInt32(imageDimensionsSplit[1]);
                    await IJSRuntime.InvokeVoidAsync("recognizeFields", "template-preview-image", "ces");
                    //var httpResponseMessage = await HttpClient.PostAsJsonAsync("api/templates/add", template);
                    //var fieldsResponseMessage = await HttpClient.PostAsJsonAsync("api/fields/add", fields);
                    //if (httpResponseMessage.IsSuccessStatusCode && fieldsResponseMessage.IsSuccessStatusCode)
                    //{
                        //NavigationManager.NavigateTo($"/formcapture/apps/{ApplicationID}");
                    //}
                    //else
                    //{
                        //TODO: Add notification display
                    //}
                }
            }

            private void AddNewField()
            {
                fields.Add(new Field()
                {
                    ID = Guid.NewGuid().ToString(),
                    Name = "New field",
                    Added = DateTime.Now,
                    Updated = DateTime.Now,
                    IsIdentifying = false,
                    TemplateID = template.ID
                });
            }

            private void SetFieldToIdentifying(Field field)
            {
                identifyingField = field;
            }

            private void RemoveField(Field field)
            {
                fields.Remove(field);
            }

            private async Task DrawField(string fieldID)
            {
                await IJSRuntime.InvokeVoidAsync("drawField", fieldID);
            }

            protected override void OnInitialized()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                base.OnInitialized();
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to be here.</h3>
    </NotAuthorized>
</AuthorizeView>