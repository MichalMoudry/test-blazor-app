@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/workflows/{workflowID}/edit"

<AuthorizeView>
    <Authorized>
        @if (workflow != null)
        {
            <h3><span class="oi oi-pencil"></span> Edit workflow</h3>
        }
        else
        {
            <h3>Loading...</h3>
        }

        <hr />

        <div class="form-group">
            @if (workflow != null)
            {
                <label for="workflow-name">Workflow name:</label>
                <input name="workflow-name" @bind-value="workflow.Name" placeholder="Enter a workflow name..." id="workflow-name" type="text" class="form-control" />
            }
            else
            {
                <p>Loading...</p>
            }
        </div>

        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title"><span class="oi oi-document"></span> Scan tasks</h5>
                    </div>
                    <div class="card-body">
                        @if (groupings.ContainsKey("scan"))
                        {
                            @if (groupings["scan"].Count != 0)
                            {
                                @foreach (WorkflowTaskGrouping grouping in groupings["scan"])
                                {
                                    <p class="card-text">
                                        <span class="badge badge-success">@tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x" @onclick="@(e => RemoveTaskFromGrouping(groupings["scan"], grouping))"></span></span>
                                    </p>
                                }
                            }
                            else
                            {
                                <p class="card-text">This group has no tasks yet.</p>
                            }
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="@(e => SetCurrentTaskGroup("scan"))" data-toggle="modal" data-target="#add-tasks-dialog"><span class="oi oi-plus"></span> Add a task</button>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title"><span class="oi oi-aperture"></span> Recognition tasks</h5>
                    </div>
                    <div class="card-body">
                        @if (groupings.ContainsKey("recognition"))
                        {
                            @if (groupings["recognition"].Count != 0)
                            {
                                @foreach (WorkflowTaskGrouping grouping in groupings["recognition"])
                                {
                                    <p class="card-text">
                                        <span class="badge badge-success">@tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x" @onclick="@(e => RemoveTaskFromGrouping(groupings["recognition"], grouping))"></span></span>
                                    </p>
                                }
                            }
                            else
                            {
                                <p class="card-text">This group has no tasks yet.</p>
                            }
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="@(e => SetCurrentTaskGroup("recognition"))" data-toggle="modal" data-target="#add-tasks-dialog"><span class="oi oi-plus"></span> Add a task</button>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title"><span class="oi oi-eye"></span> Verification tasks</h5>
                    </div>
                    <div class="card-body">
                        @if (groupings.ContainsKey("verification"))
                        {
                            @if (groupings["verification"].Count != 0)
                            {
                                @foreach (WorkflowTaskGrouping grouping in groupings["verification"])
                                {
                                    <p class="card-text">
                                        <span class="badge badge-success">@tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x" @onclick="@(e => RemoveTaskFromGrouping(groupings["verification"], grouping))"></span></span>
                                    </p>
                                }
                            }
                            else
                            {
                                <p class="card-text">This group has no tasks yet.</p>
                            }
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="@(e => SetCurrentTaskGroup("verification"))" data-toggle="modal" data-target="#add-tasks-dialog"><span class="oi oi-plus"></span> Add a task</button>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title"><span class="oi oi-expand-left"></span> Export tasks</h5>
                    </div>
                    <div class="card-body">
                        @if (groupings.ContainsKey("export"))
                        {
                            @if (groupings["export"].Count != 0)
                            {
                                @foreach (WorkflowTaskGrouping grouping in groupings["export"])
                                {
                                    <p class="card-text">
                                        <span class="badge badge-success">@tasks.SingleOrDefault(i => i.ID.Equals(grouping.TaskID)).Name <span class="oi oi-circle-x" @onclick="@(e => RemoveTaskFromGrouping(groupings["export"], grouping))"></span></span>
                                    </p>
                                }
                            }
                            else
                            {
                                <p class="card-text">This group has no tasks yet.</p>
                            }
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="@(e => SetCurrentTaskGroup("export"))" data-toggle="modal" data-target="#add-tasks-dialog"><span class="oi oi-plus"></span> Add a task</button>
                    </div>
                </div>
            </div>
        </div>

        <!--Modal for adding apps-->
        <div class="modal" id="add-tasks-dialog" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Add tasks to @currentTaskGroup task group</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        @if (tasks == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            @if (tasks.Count != 0)
                            {
                                <form>
                                    <fieldset class="form-group">
                                        @foreach (WorkflowTask task in tasks)
                                        {
                                            <div class="form-check">
                                                <input class="form-check-input" @onchange="eventArgs => { CheckboxClicked(task, eventArgs.Value); }" type="checkbox" id="@task.ID" />
                                                <label class="form-check-label" for="@task.ID">@task.Name</label>
                                            </div>
                                        }
                                    </fieldset>
                                </form>
                            }
                            else
                            {
                                <p>There are no tasks. You have to create them first.</p>
                            }
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-success" @onclick="ConfirmModal" data-dismiss="modal"><span class="oi oi-check"></span> Confirm</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"><span class="oi oi-x"></span> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="button" class="btn btn-success" @onclick="Submit"><span class="oi oi-check"></span> Edit</button>
        </div>

        <div class="toast-area">
            <div class="alert alert-danger alert-dismissible fade show d-none" id="workflow-error-toast" role="alert">
                <strong class="mr-auto">Form error</strong>
                <hr />
                <p>A workflow must have a name.</p>
                <button type="button" class="close" onclick="closeAlert('workflow-error-toast');" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>

        @code {
            [Parameter]
            public string WorkflowID { get; set; }

            /// <summary>
            /// Field that contains groupings for each workflow group.
            /// </summary>
            private Dictionary<string, List<WorkflowTaskGrouping>> groupings;

            /// <summary>
            /// Field that contains all user's tasks.
            /// </summary>
            private List<WorkflowTask> tasks;

            private Workflow workflow;

            private string currentTaskGroup;

            private List<WorkflowTask> addedTasks;

            private List<WorkflowTaskGrouping> groupingsToDelete = new List<WorkflowTaskGrouping>();

            private void SetCurrentTaskGroup(string taskGroup)
            {
                currentTaskGroup = taskGroup;
                addedTasks = new List<WorkflowTask>();
            }

            private void CheckboxClicked(WorkflowTask task, object value)
            {
                if ((bool)value)
                {
                    addedTasks.Add(task);
                }
                else
                {
                    addedTasks.Remove(task);
                }
            }

            private async Task ConfirmModal()
            {
                var ids = new List<string>();
                foreach (var task in addedTasks)
                {
                    groupings[currentTaskGroup].Add(new WorkflowTaskGrouping()
                    {
                        ID = Guid.NewGuid().ToString(),
                        TaskGroupName = currentTaskGroup,
                        TaskID = task.ID,
                        Added = DateTime.Now,
                        Updated = DateTime.Now,
                        ExecutionOrderNumber = groupings[currentTaskGroup].IndexOf(groupings[currentTaskGroup].LastOrDefault()) + 1,
                        WorkflowID = workflow.ID
                    });
                    ids.Add(task.ID);
                }
                await IJSRuntime.InvokeVoidAsync("uncheckCheckboxes", ids);
            }

            private void RemoveTaskFromGrouping(List<WorkflowTaskGrouping> groupings, WorkflowTaskGrouping grouping)
            {
                groupings.Remove(grouping);
                groupingsToDelete.Add(grouping);
            }

            private async Task Submit()
            {
                if (!string.IsNullOrEmpty(workflow.Name))
                {
                    workflow.Updated = DateTime.Now;
                    var addWorkflowMessage = await HttpClient.PutAsJsonAsync("api/workflows/update", workflow);
                    var addTaskGroupingMessage = await HttpClient.PostAsJsonAsync("api/workflowtaskgrouping/add", groupings);
                    if (groupingsToDelete.Count > 0)
                    {
                        var deleteTaskGroupingMessage = await HttpClient.PutAsJsonAsync("api/workflowtaskgrouping/delete", groupingsToDelete);
                    }
                    if (addWorkflowMessage.IsSuccessStatusCode && addTaskGroupingMessage.IsSuccessStatusCode)
                    {
                        NavigationManager.NavigateTo("/formcapture/workflows");
                    }
                }
                else
                {
                    await IJSRuntime.InvokeVoidAsync("displayToast", "workflow-error-toast");
                }
            }

            protected override async Task OnInitializedAsync()
            {
                groupings = new Dictionary<string, List<WorkflowTaskGrouping>>();
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                var tasksApiResponse = await HttpClient.GetAsync($"api/tasks/{ClaimsHelper.Instance().GetEmailClaim().Value}");
                var workflowApiResponse = await HttpClient.GetAsync($"api/workflows/get/{WorkflowID}");
                var workflowTaskGroupingApiResponse = await HttpClient.GetAsync($"api/workflowtaskgrouping/{WorkflowID}");
                if (tasksApiResponse.IsSuccessStatusCode && workflowApiResponse.IsSuccessStatusCode && workflowTaskGroupingApiResponse.IsSuccessStatusCode)
                {
                    workflow = JsonConvert.DeserializeObject<Workflow>(await workflowApiResponse.Content.ReadAsStringAsync());
                    var groupingsList = JsonConvert.DeserializeObject<List<WorkflowTaskGrouping>>(await workflowTaskGroupingApiResponse.Content.ReadAsStringAsync());
                    groupings.Add("scan", groupingsList.Where(i => i.TaskGroupName.Equals("scan")).OrderBy(i => i.ExecutionOrderNumber).ToList());
                    groupings.Add("recognition", groupingsList.Where(i => i.TaskGroupName.Equals("recognition")).OrderBy(i => i.ExecutionOrderNumber).ToList());
                    groupings.Add("verification", groupingsList.Where(i => i.TaskGroupName.Equals("verification")).OrderBy(i => i.ExecutionOrderNumber).ToList());
                    groupings.Add("export", groupingsList.Where(i => i.TaskGroupName.Equals("export")).OrderBy(i => i.ExecutionOrderNumber).ToList());
                    tasks = JsonConvert.DeserializeObject<List<WorkflowTask>>(await tasksApiResponse.Content.ReadAsStringAsync());
                }
                else if (tasksApiResponse.StatusCode.Equals(System.Net.HttpStatusCode.Unauthorized) || workflowApiResponse.StatusCode.Equals(System.Net.HttpStatusCode.Unauthorized) || workflowTaskGroupingApiResponse.StatusCode.Equals(System.Net.HttpStatusCode.Unauthorized))
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to access this page.</h3>
    </NotAuthorized>
</AuthorizeView>