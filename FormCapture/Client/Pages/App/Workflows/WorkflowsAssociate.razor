@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/apps/{appID}/addworkflow"

<AuthorizeView Roles="Admin, Workflow admin">
    <Authorized>
        @if (application != null)
        {
            <h3>Associate a workflow to the "@application.Name" app</h3>
        }

        <hr />

        <ul class="list-group">
            @if (workflows == null)
            {
                <li class="list-group-item">
                    Loading...
                </li>
            }
            else
            {
                foreach (Workflow workflow in workflows)
                {
                    <li class="list-group-item">
                        <input type="checkbox" id="@workflow.ID" class="form-check-input ml-1" @onchange="eventArgs => { CheckboxClicked(workflow, eventArgs.Value); }" />
                        <label class="form-check-label ml-4" for="@workflow.ID">@workflow.Name</label>
                    </li>
                }
                @if (workflows.Count <= 0)
                {
                    <li>
                        <p>There are no workflows. <a href="./formcapture/workflows/add" title="Go to workflow creation page">Go to workflow creation page.</a></p>
                    </li>
                }
            }
        </ul>

        <div class="mt-3">
            <button type="button" class="btn btn-success" @onclick="Submit"><span class="oi oi-check"></span> Confirm</button>
        </div>

        <div class="toast-area">
            <div class="alert alert-danger alert-dismissible fade show d-none" id="workflow-error-toast" role="alert">
                <strong class="mr-auto">Form error</strong>
                <hr />
                <p>At least one workflow must be selected.</p>
                <button type="button" class="close" onclick="closeAlert('workflow-error-toast');" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>

        @code
        {
            [Parameter]
            public string AppID { get; set; }

            private CaptureApplication application;

            private List<Workflow> workflows;

            private List<CaptureAppWorkflows> appWorkflows = new List<CaptureAppWorkflows>();

            private void CheckboxClicked(Workflow workflow, object value)
            {
                if ((bool)value)
                {
                    appWorkflows.Add(new CaptureAppWorkflows()
                    {
                        ID = Guid.NewGuid().ToString(),
                        WorkflowID = workflow.ID,
                        AppID = this.AppID,
                        Added = DateTime.Now,
                        Updated = DateTime.Now,
                        WorkflowName = workflow.Name
                    });
                }
                else
                {
                    appWorkflows.Remove(appWorkflows.SingleOrDefault(i => i.WorkflowID.Equals(workflow.ID)));
                }
            }

            private async Task Submit()
            {
                if (appWorkflows.Count > 0)
                {
                    var addResponseMessage = await HttpClient.PostAsJsonAsync("api/captureappworkflows/add", appWorkflows);
                    if (addResponseMessage.IsSuccessStatusCode)
                    {
                        NavigationManager.NavigateTo($"/formcapture/apps/{AppID}");
                    }
                }
                else
                {
                    await IJSRuntime.InvokeVoidAsync("displayToast", "workflow-error-toast");
                }
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                var httpResponseMessage = await HttpClient.PostAsJsonAsync("/api/captureApps/get", AppID);
                var workflowsResponseMessage = await HttpClient.PostAsJsonAsync("api/workflows/", ClaimsHelper.Instance().GetEmailClaim().Value);
                if (httpResponseMessage.IsSuccessStatusCode && workflowsResponseMessage.IsSuccessStatusCode)
                {
                    application = JsonConvert.DeserializeObject<CaptureApplication>(await httpResponseMessage.Content.ReadAsStringAsync());
                    workflows = JsonConvert.DeserializeObject<List<Workflow>>(await workflowsResponseMessage.Content.ReadAsStringAsync());
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to access this page.</h3>
    </NotAuthorized>
</AuthorizeView>