@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@page "/formcapture/workflows"

<AuthorizeView Roles="Admin, Workflow admin">
    <Authorized>
        <h3>Workflows</h3>
        <hr />

        <div class="row">
            <div class="col col-lg-3 col-sm-6">
                <button class="btn btn-success" @onclick="@(e => Navigate("/formcapture/workflows/add"))"><span class="oi oi-plus"></span> Add a new workflow</button>
            </div>

            <div class="col col-lg-2 col-sm-6">
                <button class="btn btn-light"><span class="oi oi-elevator"></span> Sort list</button>
            </div>
        </div>

        <div>
            <br />
            @if (workflows == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <td>Name</td>
                            <td>Added</td>
                            <td>Edit</td>
                            <td>Delete</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Workflow workflow in workflows)
                        {
                        <tr>
                            <td>@workflow.Name</td>
                            <td>@workflow.Added</td>
                            <td @onclick="@(e => Navigate($"/formcapture/workflows/{workflow.ID}"))"><span class="oi oi-pencil"></span></td>
                            <td><span class="oi oi-trash"></span></td>
                        </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

        @code
        {
            private List<Workflow> workflows;

            private void Navigate(string page)
            {
                NavigationManager.NavigateTo(page);
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                HttpResponseMessage responseMessage = await HttpClient.PostAsJsonAsync("api/workflows/", ClaimsHelper.Instance().GetEmailClaim().Value);
                if (responseMessage.IsSuccessStatusCode)
                {
                    workflows = JsonConvert.DeserializeObject<List<Workflow>>(await responseMessage.Content.ReadAsStringAsync());
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to access this page.</h3>
    </NotAuthorized>
</AuthorizeView>