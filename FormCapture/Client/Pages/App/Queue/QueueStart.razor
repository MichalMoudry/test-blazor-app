@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/apps/{ApplicationID}/startqueue"

<AuthorizeView Roles="Admin, Workflow admin">
    <Authorized>
        <h3><span class="oi oi-play-circle"></span> Start a new queue</h3>

        <hr />

        <h4><span class="oi oi-project"></span> Select workflow</h4>
        <select class="form-control">
            @if (appWorkflows != null)
            {
                @foreach (var workflow in appWorkflows)
                {
                    <option value="@workflow.ID">@workflow.WorkflowName</option>
                }
            }
        </select>

        <h4 class="mt-3"><span class="oi oi-data-transfer-upload"></span> Upload files</h4>
        <InputFile multiple OnChange="FileSelected" />
        @if (uploadedImagesAsBase64String != null)
        {
            @if (uploadedImagesAsBase64String.Count > 0)
            {
                <div id="queue-files-preview" class="carousel slide mt-2" data-ride="carousel">
                    <div class="carousel-inner">
                        @foreach (var image in uploadedImagesAsBase64String)
                        {
                            @if (uploadedImagesAsBase64String.FirstOrDefault().Equals(image))
                            {
                                <div class="carousel-item active">
                                    <img src="@image" class="d-block w-100" alt="Uploaded image for processing">
                                </div>
                            }
                            else
                            {
                                <div class="carousel-item">
                                    <img src="@image" class="d-block w-100" alt="Uploaded image for processing">
                                </div>
                            }
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-target="#queue-files-preview" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-target="#queue-files-preview" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            }
            else
            {
                <br />
            }
        }
        <button class="btn btn-success mt-3">
            <span class="oi oi-check"></span> Start the queue
        </button>

        @code
        {
            [Parameter]
            public string ApplicationID { get; set; }

            private List<CaptureAppWorkflows> appWorkflows;

            private List<string> uploadedImagesAsBase64String = new List<string>();

            private Batch batch = new Batch() { ID = Guid.NewGuid().ToString() };

            private Queue queue = new Queue() { ID = Guid.NewGuid().ToString() };

            private List<ProcessedFile> processedFiles = new List<ProcessedFile>();

            private async Task FileSelected(IFileListEntry[] files)
            {
                if (files.Count() == 0)
                {
                    return;
                }
                System.IO.MemoryStream stream;
                ProcessedFile tempFile;
                foreach (var file in files)
                {
                    tempFile = new ProcessedFile() { ID = Guid.NewGuid().ToString(), BatchID = batch.ID, Type = file.Type, Name = file.Name, Added = DateTime.Now, Updated = DateTime.Now };
                    using (stream = new System.IO.MemoryStream())
                    {
                        await file.Data.CopyToAsync(stream);
                        tempFile.Content = stream.ToArray();
                        processedFiles.Add(tempFile);
                        uploadedImagesAsBase64String.Add($"data:{file.Type};base64,{Convert.ToBase64String(tempFile.Content)}");
                    }
                }
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                var getWorkflowsMessage = await HttpClient.GetAsync($"/api/captureappworkflows/{ApplicationID}");
                if (getWorkflowsMessage.IsSuccessStatusCode)
                {
                    appWorkflows = JsonConvert.DeserializeObject<List<CaptureAppWorkflows>>(await getWorkflowsMessage.Content.ReadAsStringAsync());
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to be here.</h3>
    </NotAuthorized>
</AuthorizeView>