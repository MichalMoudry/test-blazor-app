@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/apps/{ApplicationID}/startqueue"

<AuthorizeView Roles="Admin, Workflow admin, User">
    <Authorized>
        <h3><span class="oi oi-play-circle"></span> Start a new queue</h3>

        <hr />

        <h4><span class="oi oi-project"></span> Select workflow</h4>
        <select class="form-control" @bind="workflowID">
            @if (appWorkflows != null)
            {
                @foreach (var workflow in appWorkflows)
                {
                    <option value="@workflow.ID">@workflow.WorkflowName</option>
                }
            }
        </select>

        <h4 class="mt-3"><span class="oi oi-data-transfer-upload"></span> Upload files</h4>
        <InputFile multiple OnChange="@FileSelected" />
        @if (uploadedImagesAsBase64String != null)
        {
            @if (uploadedImagesAsBase64String.Count > 0)
            {
                <div id="queue-files-preview" class="carousel slide mt-2" data-ride="carousel">
                    <div class="carousel-inner">
                        @foreach (var image in uploadedImagesAsBase64String)
                        {
                            @if (uploadedImagesAsBase64String.FirstOrDefault().Equals(image))
                            {
                                <div class="carousel-item active">
                                    <img src="@image" class="d-block w-100" alt="Uploaded image for processing">
                                </div>
                            }
                            else
                            {
                                <div class="carousel-item">
                                    <img src="@image" class="d-block w-100" alt="Uploaded image for processing">
                                </div>
                            }
                        }
                    </div>
                    @if (uploadedImagesAsBase64String.Count > 1)
                    {
                        <button class="carousel-control-prev" type="button" data-target="#queue-files-preview" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-target="#queue-files-preview" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    }
                </div>
            }
            else
            {
                <br />
            }
        }

        <button class="btn btn-success mt-3 mb-3" @onclick="Confirm">
            <span class="oi oi-check"></span> Start the queue
        </button>

        <div class="toast-area">
            <div class="alert alert-danger alert-dismissible fade show d-none" id="workflow-error-toast" role="alert">
                <strong class="mr-auto">Workflow error</strong>
                <hr />
                <p>A workflow must be selected.</p>
                <button type="button" class="close" onclick="closeAlert('workflow-error-toast');" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="alert alert-danger alert-dismissible fade show d-none" id="file-error-toast" role="alert">
                <strong class="mr-auto">File error</strong>
                <hr />
                <p>At least one file must be uploaded.</p>
                <button type="button" class="close" onclick="closeAlert('file-error-toast');" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>

        @code
        {
            [Parameter]
            public string ApplicationID { get; set; }

            private List<CaptureAppWorkflows> appWorkflows;

            private string workflowID;

            private List<string> uploadedImagesAsBase64String = new List<string>();

            private Queue queue = new Queue() { ID = Guid.NewGuid().ToString() };

            private List<ProcessedFile> processedFiles = new List<ProcessedFile>();

            private async Task FileSelected(InputFileChangeEventArgs e)
            {
                if (uploadedImagesAsBase64String.Count > 0)
                {
                    uploadedImagesAsBase64String.Clear();
                }
                if (e.FileCount == 0)
                {
                    return;
                }
                //System.IO.MemoryStream stream;
                ProcessedFile tempFile;
                byte[] buffer;
                foreach (var file in e.GetMultipleFiles())
                {
                    buffer = new byte[file.Size];
                    await file.OpenReadStream().ReadAsync(buffer);
                    tempFile = new ProcessedFile() { ID = Guid.NewGuid().ToString(), QueueID = queue.ID, Type = file.ContentType, Name = file.Name, Added = DateTime.Now, Updated = DateTime.Now };
                    tempFile.Content = buffer;
                    processedFiles.Add(tempFile);
                    uploadedImagesAsBase64String.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}");
                    //using (stream = new System.IO.MemoryStream())
                    //{
                    //await file.OpenReadStream().CopyToAsync(stream);
                    //tempFile.Content = stream.ToArray();
                    //processedFiles.Add(tempFile);
                    //uploadedImagesAsBase64String.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(tempFile.Content)}");
                    //}
                }
            }

            private async Task Confirm()
            {
                if (appWorkflows.Count > 0 && uploadedImagesAsBase64String.Count > 0)
                {
                    queue.UserID = ClaimsHelper.Instance().GetEmailClaim().Value;
                    queue.AppID = ApplicationID;
                    queue.Added = DateTime.Now;
                    queue.Updated = DateTime.Now;
                    queue.AppWorkflowTaskGroupID = TaskGroupID.Scan;
                    queue.UserID = ClaimsHelper.Instance().GetEmailClaim().Value;
                    queue.Status = QueueStatus.Start;
                    if (string.IsNullOrEmpty(workflowID))
                    {
                        workflowID = appWorkflows.FirstOrDefault().WorkflowID;
                    }
                    queue.WorkflowID = workflowID;
                    var postFilesResponse = await HttpClient.PostAsJsonAsync("/api/processedfiles/add", processedFiles);
                    var queueResponseMessage = await HttpClient.PostAsJsonAsync("/api/queue/add", queue);
                    if (postFilesResponse.IsSuccessStatusCode && queueResponseMessage.IsSuccessStatusCode)
                    {
                        NavigationManager.NavigateTo($"/formcapture/queue/{queue.ID}/processing");
                    }
                }
                else if (appWorkflows.Count <= 0)
                {
                    await IJSRuntime.InvokeVoidAsync("displayToast", "workflow-error-toast");
                }
                else if (uploadedImagesAsBase64String.Count <= 0)
                {
                    await IJSRuntime.InvokeVoidAsync("displayToast", "file-error-toast");
                }
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                var getWorkflowsMessage = await HttpClient.GetAsync($"/api/captureappworkflows/{ApplicationID}");
                if (getWorkflowsMessage.IsSuccessStatusCode)
                {
                    appWorkflows = JsonConvert.DeserializeObject<List<CaptureAppWorkflows>>(await getWorkflowsMessage.Content.ReadAsStringAsync());
                }
                else if (getWorkflowsMessage.StatusCode.Equals(System.Net.HttpStatusCode.Unauthorized))
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to be here.</h3>
    </NotAuthorized>
</AuthorizeView>