@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/queue/{QueueID}/processing"

<AuthorizeView Roles="Admin, Workflow admin, User">
    <Authorized>

        <h3><span class="oi oi-play-circle"></span> Queue processing</h3>

        <div class="row">
            <div class="col">
                <h4 class="mt-4"><span class="oi oi-file"></span> Processed files</h4>
                @if (processedFiles != null)
                {
                    <div id="queueCarousel" class="carousel slide" data-ride="carousel">
                        <div class="carousel-inner">
                            @foreach (var file in processedFiles)
                            {
                                @if (processedFiles.First().Equals(file))
                                {
                                    <div class="carousel-item active">
                                        <img src="@SetImageSource(file.Content, file.Type)" id="@file.ID" alt="@file.Name" class="d-block carousel-image" draggable="false" />
                                    </div>
                                }
                                else
                                {
                                    <div class="carousel-item">
                                        <img src="@SetImageSource(file.Content, file.Type)" id="@file.ID" alt="@file.Name" class="d-block carousel-image" draggable="false" />
                                    </div>
                                }
                            }
                        </div>
                        <a class="carousel-control-prev" href="#queueCarousel" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#queueCarousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                }
            </div>

            <div class="col">
                <div id="scanTasks" class="mt-4">
                    <h4><span class="oi oi-document"></span> Scan tasks</h4>
                    <ul class="list-group">
                        @if (scanTaskProgression != null)
                        {
                            @foreach (var item in scanTaskProgression)
                            {
                                @if (scanTaskProgression.Last().Equals(item))
                                {
                                    <li class="list-group-item active">
                                        @item.Key - @if (item.Value)
                                        {
                                            <span><span class="oi oi-circle-check"></span></span>
                                        }
                                        else
                                        {
                                            <span>in progress</span>
                                        }
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item">
                                        @item.Key - @if (item.Value)
                                        {
                                            <span><span class="oi oi-circle-check"></span></span>
                                        }
                                        else
                                        {
                                            <span>in progress</span>
                                        }
                                    </li>
                                }
                            }
                        }
                    </ul>

                    <button type="button" class="btn btn-success mt-2 @ContinueButtonCssClass" @onclick="ContinueProcessing">
                        Continue processing <span class="oi oi-play-circle"></span>
                    </button>
                </div>

                <div id="recognitionTasks" class="mt-4">
                    <h4><span class="oi oi-aperture"></span> Recognition tasks</h4>
                    <ul class="list-group">
                        @if (recognitionTaskProgression != null)
                        {
                            @foreach (var task in recognitionTaskProgression)
                            {
                                @if (recognitionTaskProgression.Last().Equals(task))
                                {
                                    <li class="list-group-item active">
                                        @task.Key - @if (task.Value)
                                        {
                                            <span><span class="oi oi-circle-check"></span></span>
                                        }
                                        else
                                        {
                                            <span>in progress</span>
                                        }
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item">
                                        @task.Key - @if (task.Value)
                                        {
                                            <span><span class="oi oi-circle-check"></span></span>
                                        }
                                        else
                                        {
                                            <span>in progress</span>
                                        }
                                    </li>
                                }
                            }
                        }
                    </ul>
                </div>

                <div id="verificationTasks" class="mt-4">
                    <h4><span class="oi oi-eye"></span> Verification tasks</h4>
                    <ul class="list-group">
                    </ul>
                </div>

                <div id="exportTasks" class="mt-4">
                    <h4><span class="oi oi-expand-left"></span> Export tasks</h4>
                    <ul class="list-group">
                    </ul>
                </div>
            </div>
        </div>

        @code
        {
            [Parameter]
            public string QueueID { get; set; }

            private Queue queue;

            private List<ProcessedFile> processedFiles;

            private List<WorkflowTaskGrouping> taskGroupings;

            private List<WorkflowTask> tasks;

            private List<Template> templates;

            private Dictionary<string, bool> scanTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> recognitionTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> verificationTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> exportTaskProgression = new Dictionary<string, bool>();

            private List<Field> idFields;

            private Dictionary<string, List<Field>> nonIdFields;

            private bool isContinueButtonHidden = true;

            private string ContinueButtonCssClass => isContinueButtonHidden ? "d-none" : null;

            private string SetImageSource(byte[] data, string contentType)
            {
                return $"data:{contentType};base64,{Convert.ToBase64String(data)}";
            }

            private async Task ExecuteScanTasks()
            {
                scanTaskProgression.Add("Obtaining custom tasks...", false);
                //Pull task groupings
                var taskGroupingsResponse = await HttpClient.GetAsync($"/api/workflowtaskgrouping/{queue.WorkflowID}");
                if (taskGroupingsResponse.IsSuccessStatusCode)
                {
                    taskGroupings = JsonConvert.DeserializeObject<List<WorkflowTaskGrouping>>(await taskGroupingsResponse.Content.ReadAsStringAsync());
                }

                //Pull tasks from groupings
                var tasksResponse = await HttpClient.PostAsJsonAsync("/api/tasks/grouped", taskGroupings);
                if (tasksResponse.IsSuccessStatusCode)
                {
                    tasks = JsonConvert.DeserializeObject<List<WorkflowTask>>(await tasksResponse.Content.ReadAsStringAsync());
                    scanTaskProgression["Obtaining custom tasks..."] = true;
                }
            }

            private async Task ContinueProcessing()
            {
                recognitionTaskProgression.Add("Obtaining app's templates", false);
                //Pull templates
                var templatesResponse = await HttpClient.GetAsync($"/api/templates/{queue.AppID}");
                if (templatesResponse.IsSuccessStatusCode)
                {
                    templates = JsonConvert.DeserializeObject<List<Template>>(await templatesResponse.Content.ReadAsStringAsync());
                    recognitionTaskProgression["Obtaining app's templates"] = true;
                }

                recognitionTaskProgression.Add("Obtaining identifying fields", false);
                //Pull id fields
                var identifyingFieldsResponse = await HttpClient.PostAsJsonAsync("/api/fields/identifying", templates);
                if (identifyingFieldsResponse.IsSuccessStatusCode)
                {
                    idFields = JsonConvert.DeserializeObject<List<Field>>(await identifyingFieldsResponse.Content.ReadAsStringAsync());
                    recognitionTaskProgression["Obtaining identifying fields"] = true;
                }

                recognitionTaskProgression.Add("Applying identifying fields", false);
                System.Text.Json.JsonElement recogResponse;
                string[] recogResponseArray;
                Field idField;
                recogResponse = await IJSRuntime.InvokeAsync<System.Text.Json.JsonElement>("recog", idFields, processedFiles.Select(i => Convert.ToBase64String(i.Content)), "ces", processedFiles.Select(i => i.Type));
                var recogResponseList = recogResponse.EnumerateArray().ToList();
                foreach (var item in recogResponseList)
                {
                    recogResponseArray = item.ToString().Split("/");
                    idField = idFields.SingleOrDefault(i => i.ID.Equals(recogResponseArray[1]) && i.ExpectedValue.Equals(recogResponseArray[0]));
                    if (idField != null)
                    {
                        if (idField.ExpectedValue.Equals(recogResponseArray[0]))
                        {
                            processedFiles[recogResponseList.IndexOf(item)].TemplateID = idField.TemplateID;
                            recognitionTaskProgression["Applying identifying fields"] = true;
                        }
                    }
                }

                recognitionTaskProgression.Add("Obtaining non identifying fields", false);
                var idedFiles = new List<ProcessedFile>(processedFiles.Where(i => i.TemplateID != null));
                var nonIdFieldsResponse = await HttpClient.PostAsJsonAsync("/api/fields/nonidfields", idedFiles);
                if (nonIdFieldsResponse.IsSuccessStatusCode)
                {
                    nonIdFields = JsonConvert.DeserializeObject<Dictionary<string, List<Field>>>(await nonIdFieldsResponse.Content.ReadAsStringAsync());
                    recognitionTaskProgression["Obtaining non identifying fields"] = true;
                }
                else
                {
                    return;
                }

                this.StateHasChanged();

                recognitionTaskProgression.Add("Applying rest of fields", false);
                foreach (var file in idedFiles)
                {
                    Console.WriteLine(await IJSRuntime.InvokeAsync<System.Text.Json.JsonElement>("recog", nonIdFields[file.ID], new string[] { Convert.ToBase64String(file.Content) }, "ces", new string[] { file.Type }));
                }
                recognitionTaskProgression["Applying rest of fields"] = true;
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                scanTaskProgression.Add("Obtaining files...", false);
                //Pull queue and its files
                var filesResponse = await HttpClient.GetAsync($"/api/processedfiles/{QueueID}");
                var queueResponse = await HttpClient.GetAsync($"/api/queue/queue?id={QueueID}");

                if (filesResponse.IsSuccessStatusCode && queueResponse.IsSuccessStatusCode)
                {
                    processedFiles = JsonConvert.DeserializeObject<List<ProcessedFile>>(await filesResponse.Content.ReadAsStringAsync());
                    queue = JsonConvert.DeserializeObject<Queue>(await queueResponse.Content.ReadAsStringAsync());
                    scanTaskProgression["Obtaining files..."] = true;
                    await ExecuteScanTasks();
                    isContinueButtonHidden = false;
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to be here.</h3>
    </NotAuthorized>
</AuthorizeView>