@layout AppLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@page "/formcapture/queue/{QueueID}/processing"

<AuthorizeView Roles="Admin, Workflow admin, User">
    <Authorized>

        <h3>Queue processing</h3>

        <h4>Processed files</h4>
        @if (processedFiles != null)
        {
            @foreach (var file in processedFiles)
            {
                <div>
                    <img src="@SetImageSource(file.Content, file.Type)" alt="@file.Name" draggable="false" />
                </div>
            }
        }

        <div id="scanTasks">
            <h4><span class="oi oi-document"></span> Scan tasks</h4>
            <ul class="list-group">
                @if (scanTaskProgression != null)
                {
                    @foreach (var item in scanTaskProgression)
                    {
                        @if (scanTaskProgression.Last().Equals(item))
                        {
                            <li class="list-group-item active">
                                @item.Key - @if (item.Value)
                                {
                                    <span><span class="oi oi-circle-check"></span></span>
                                }
                                else
                                {
                                    <span>in progress</span>
                                }
                            </li>
                        }
                        else
                        {
                            <li class="list-group-item">
                                @item.Key - @if (item.Value)
                                {
                                    <span><span class="oi oi-circle-check"></span></span>
                                }
                                else
                                {
                                    <span>in progress</span>
                                }
                            </li>
                        }
                    }
                }
            </ul>
        </div>

        <div id="recognitionTasks">
            <h4><span class="oi oi-aperture"></span> Recognition tasks</h4>
            <ul class="list-group">
                @if (recognitionTaskProgression != null)
                {
                    @foreach (var task in recognitionTaskProgression)
                    {
                        @if (recognitionTaskProgression.Last().Equals(task))
                        {
                            <li class="list-group-item active">
                                @task.Key - @if (task.Value)
                                {
                                    <span><span class="oi oi-circle-check"></span></span>
                                }
                                else
                                {
                                    <span>in progress</span>
                                }
                            </li>
                        }
                        else
                        {
                            <li class="list-group-item">
                                @task.Key - @if (task.Value)
                                {
                                    <span><span class="oi oi-circle-check"></span></span>
                                }
                                else
                                {
                                    <span>in progress</span>
                                }
                            </li>
                        }
                    }
                }
            </ul>
        </div>

        <div id="verificationTasks">
            <h4><span class="oi oi-eye"></span> Verification tasks</h4>
            <ul class="list-group">
            </ul>
        </div>

        <div id="exportTasks">
            <h4><span class="oi oi-expand-left"></span> Export tasks</h4>
            <ul class="list-group">
            </ul>
        </div>


        @code
        {
            [Parameter]
            public string QueueID { get; set; }

            private Queue queue;

            private List<ProcessedFile> processedFiles;

            private List<WorkflowTaskGrouping> taskGroupings;

            private List<WorkflowTask> tasks;

            private List<Template> templates;

            private Dictionary<string, bool> scanTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> recognitionTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> verificationTaskProgression = new Dictionary<string, bool>();

            private Dictionary<string, bool> exportTaskProgression = new Dictionary<string, bool>();

            private string SetImageSource(byte[] data, string contentType)
            {
                return $"data:{contentType};base64,{Convert.ToBase64String(data)}";
            }

            protected override async Task OnInitializedAsync()
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", ClaimsHelper.Instance().GetToken());
                scanTaskProgression.Add("Obtaining files...", false);
                //Pull queue and its files
                var filesResponse = await HttpClient.GetAsync($"/api/processedfiles/{QueueID}");
                var queueResponse = await HttpClient.GetAsync($"/api/queue/queue?id={QueueID}");

                if (filesResponse.IsSuccessStatusCode && queueResponse.IsSuccessStatusCode)
                {
                    processedFiles = JsonConvert.DeserializeObject<List<ProcessedFile>>(await filesResponse.Content.ReadAsStringAsync());
                    queue = JsonConvert.DeserializeObject<Queue>(await queueResponse.Content.ReadAsStringAsync());
                    scanTaskProgression["Obtaining files..."] = true;

                    scanTaskProgression.Add("Obtaining custom tasks...", false);
                    //Pull task groupings
                    var taskGroupingsResponse = await HttpClient.GetAsync($"/api/workflowtaskgrouping/{queue.WorkflowID}");
                    if (taskGroupingsResponse.IsSuccessStatusCode)
                    {
                        taskGroupings = JsonConvert.DeserializeObject<List<WorkflowTaskGrouping>>(await taskGroupingsResponse.Content.ReadAsStringAsync());
                    }

                    //Pull tasks from groupings
                    var tasksResponse = await HttpClient.PostAsJsonAsync("/api/tasks/grouped", taskGroupings);
                    if (tasksResponse.IsSuccessStatusCode)
                    {
                        tasks = JsonConvert.DeserializeObject<List<WorkflowTask>>(await tasksResponse.Content.ReadAsStringAsync());
                        scanTaskProgression["Obtaining custom tasks..."] = true;
                    }
                    else
                    {
                        scanTaskProgression["Obtaining custom tasks..."] = false;
                        return;
                    }

                    recognitionTaskProgression.Add("Obtaining app's templates", false);
                    var templatesResponse = await HttpClient.GetAsync($"/api/templates/{queue.AppID}");
                    if (templatesResponse.IsSuccessStatusCode)
                    {
                        templates = JsonConvert.DeserializeObject<List<Template>>(await templatesResponse.Content.ReadAsStringAsync());
                        recognitionTaskProgression["Obtaining app's templates"] = true;
                    }
                    else
                    {
                        recognitionTaskProgression["Obtaining app's templates"] = false;
                        return;
                    }

                    recognitionTaskProgression.Add("Obtaining identifying fields", false);
                    var identifyingFieldsResponse = await HttpClient.PostAsJsonAsync("/api/fields/identifying", templates);
                    if (identifyingFieldsResponse.IsSuccessStatusCode)
                    {
                        recognitionTaskProgression["Obtaining identifying fields"] = true;
                    }
                    else
                    {
                        recognitionTaskProgression["Obtaining identifying fields"] = false;
                        return;
                    }
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        <h3>You are not authorized to be here.</h3>
    </NotAuthorized>
</AuthorizeView>