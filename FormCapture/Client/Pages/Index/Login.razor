@layout MainLayout
@page "/login"
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<h3><span class="oi oi-account-login"></span> Login</h3>

<div class="form-card">
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" @bind-value="loginModel.Email" placeholder="Enter your email..." class="form-control" id="email" name="email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" @bind-value="loginModel.Password" placeholder="Enter your password..." class="form-control" id="password" name="password" />
    </div>

    <button @onclick="Submit" class="btn btn-primary" disabled="@isSubmitButtonDisabled">Submit</button>

    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary @LoadingIndicatorCssClass" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

<div class="alert alert-danger form-alert @FormAlertCssClass" role="alert">
    Login form wasn't properly completed. Or user does not exist.
</div>

@code
{
    private LoginModel loginModel = new LoginModel();

    private bool isLoadingIndicatorHidden = true;

    private bool isFormAlertDisplayed = false;

    private string LoadingIndicatorCssClass => isLoadingIndicatorHidden ? "d-none" : null;

    private string FormAlertCssClass => isFormAlertDisplayed ? "d-block" : "d-none";

    private bool isSubmitButtonDisabled = false;

    private async Task Submit()
    {
        isFormAlertDisplayed = false;
        isSubmitButtonDisabled = true;
        if (!string.IsNullOrEmpty(loginModel.Email) && !string.IsNullOrEmpty(loginModel.Password))
        {
            isLoadingIndicatorHidden = !isLoadingIndicatorHidden;
            //Source:
            //SAINTY, Chris, 2019. Authentication with client-side Blazor using WebAPI and ASP.NET Core Identity. Chris Sainty [online]. [vid. 2021-04-29]. Dostupné z: https://chrissainty.com/securing-your-blazor-apps-authentication-with-clientside-blazor-using-webapi-aspnet-core-identity/
            bool res = await AuthService.LoginUser(loginModel);
            if (res)
            {
                NavigationManager.NavigateTo("/formcapture/apps");
            }
            else
            {
                isFormAlertDisplayed = true;
            }
            isLoadingIndicatorHidden = !isLoadingIndicatorHidden;
        }
        else
        {
            isFormAlertDisplayed = true;
            isSubmitButtonDisabled = false;
        }
    }
}